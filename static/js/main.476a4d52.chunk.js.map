{"version":3,"sources":["weather-data-display.js","city-changer.js","App.js","serviceWorker.js","index.js"],"names":["WeatherDataDisplay","data","this","props","react_default","a","createElement","className","city","description","src","icon","alt","temp","tempMin","tempMax","humidity","wind","React","Component","CityChanger","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","show","self","closeModal","setState","document","addEventListener","e","keyCode","cityName","getElementById","value","getNewWeather","href","onClick","id","type","placeholder","App","weather","display","src_weather_data_display","src_city_changer","fetch","concat","mode","then","response","json","newData","name","sys","country","Math","round","main","temp_max","temp_min","speed","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.476a4d52.chunk.js","sourcesContent":["import React from 'react';\nimport './weather-data-display.css';\n\nclass WeatherDataDisplay extends React.Component {\n\n\trender() {\n\n\t\tlet data = this.props.data;\n\n\t\treturn(\n\t\t<div className=\"weather-display\">\n\t\t\t<div className=\"city-name\">\n\t\t\t\t<span>{data.city}</span>\n\t\t\t</div>\n\t\t\t<div className=\"weather-condition\">\n\t\t\t\t<span>{data.description}</span>\n\t\t\t</div>\n\t\t\t<div className=\"weather-icon\">\n\t\t\t\t<img src={data.icon} alt={data.description}/>\n\t\t\t</div>\n\t\t\t<div className=\"weather-details\">\n\t\t\t\t<div className=\"temp-section\">\n\t\t\t\t\t<span className=\"main-temp\">{data.temp}&deg;</span>\n\t\t\t\t\t<div className=\"temp-max-min\">\n\t\t\t\t\t<span className=\"min-temp\">\t&#9660;{data.tempMin}&deg;</span>\n\t\t\t\t\t<span className=\"max-temp\">\t&#9650;{data.tempMax}&deg;</span>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"air-condition\">\n\t\t\t\t\t<div className=\"humidity\">\n\t\t\t\t\t\t<span>HUMIDITY</span>\n\t\t\t\t\t\t<span>{data.humidity}</span>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"wind-speed\">\n\t\t\t\t\t\t<span>Wind</span>\n\t\t\t\t\t\t<span>{data.wind}km/h</span>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div className=\"day\">\n\t\t\t\t<span>SUNDAY</span>\n\t\t\t</div>\n\t\t\t<div className=\"date\">\n\t\t\t\t<span>MAY,19</span>\n\t\t\t</div>\n\t\t</div>\n\t\t)\n\t}\n}\n\nexport default WeatherDataDisplay;","import React from 'react';\nimport './city-changer.css';\n\nclass CityChanger extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = ({\n            show: false\n        })\n    }\n\n    render() {\n        let self = this;\n        function openModal() {\n            self.setState({\n                show: true\n            })\n        }\n        function closeModal() {\n            self.setState({\n                show: false\n            })\n        }\n        document.addEventListener('keyup', function(e) {\n            if(self.state.show && e.keyCode === 13){\n                let cityName = document.getElementById('city-name').value;\n                self.props.getNewWeather(cityName);\n                closeModal();\n            }\n        })\n        return (\n            <div className=\"city-changer\">\n\n                <div className=\"btn-container\">\n                    <a href=\"#\" className=\"btn\" onClick={openModal}>Change City</a>\n                </div>\n                <div id=\"input-container\" className={this.state.show?\"\":\"hidden\"}>\n                    <input type=\"text\" placeholder=\"london,uk\" id=\"city-name\"/>\n                    <a href=\"#\" className=\"btn\" onClick={closeModal}>Cancel</a>\n                </div>\n            </div>\n        )\n    }\n\n}\n\nexport default CityChanger","import React from 'react';\nimport './App.css';\nimport WeatherDataDisplay from './weather-data-display';\nimport CityChanger from './city-changer';\n\nclass App extends React.Component {\n\n  state = {\n    weather: null\n  }\n\n  render() {\n    let self = this;\n    let display = <div></div>\n    function getWeatherData(cityName) {\n\n      fetch(`https://api.openweathermap.org/data/2.5/weather?q=${cityName}&units=metric&APPID=b1940f452335ffa6df6c7adfa2cba3d1`,{\n        mode: 'cors'\n      })\n      .then(function(response){\n        return response.json()\n      })\n      .then(function(response){\n        let newData =  {}\n        newData.city = response.name + ',' + response.sys.country;\n        newData.description = response.weather[0].description;\n        newData.icon = `http://openweathermap.org/img/w/${response.weather[0].icon}.png`;\n        newData.temp = Math.round(response.main.temp);\n        newData.tempMax = Math.round(response.main.temp_max);\n        newData.tempMin = Math.round(response.main.temp_min);\n        newData.humidity = response.main.humidity;\n        newData.wind = response.wind.speed;\n        self.setState({\n          weather: newData\n        })\n      })\n    }\n    if(this.state.weather){\n        display = <WeatherDataDisplay data={this.state.weather} />\n      } \n    return (\n      <div className=\"main-container\">\n        { display }\n        <CityChanger getNewWeather={getWeatherData}/>\n      </div>\n    );\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}